#!/usr/bin/env python
# SIGNL4 Alerting
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2020 Derdack GmbH
#          SIGNL4 <info@signl4.com>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import requests
import json
import os
import sys

api_url = "https://connect.signl4.com/webhook/"

def main():
    context = dict([ (var[7:], value.decode("utf-8"))
                      for (var, value) in os.environ.items()
                      if var.startswith("NOTIFY_")])

    message    = get_text(context)

    password = context["PARAMETER_PASSWORD"]

    return send_alert(password, message)

def get_text(context):

    host_name = context['HOSTNAME']
    notification_type = context['NOTIFICATIONTYPE']
    service_state = ''
    service_desc = ''
    service_output = ''
    host_state = ''
    notification_comment = ''
    contact_pager = context['CONTACTPAGER'].replace(' ', '')
    description = notification_type + ' on ' + host_name

    # Prepare Default information and Type PROBLEM, RECOVERY
    if context['WHAT'] == 'SERVICE':
        if notification_type in [ "PROBLEM", "RECOVERY" ]:
            service_state = context['SERVICESTATE']
            service_desc = context['SERVICEDESC']
            service_output = context['SERVICEOUTPUT']
            description += ' (' + service_desc + ')'
        else:
            service_desc = context['SERVICEDESC']
            description += ' (' + service_desc + ')'

    else:
        if notification_type in [ "PROBLEM", "RECOVERY" ]:
            host_state = context['HOSTSTATE']
            description += ' (' + host_state + ')'
        else:
            description += ' (' + host_state + ')'

    message = {
        'Title': description,
        'Host Name': host_name,
        'Notification Type': notification_type,
        'Service State': service_state,
        'Service Description': service_desc,
        'Service Output': service_output,
        'Host State': host_state,
        'Notification Comment': notification_comment,
        'Contact Pager': contact_pager   
    }

    return message

def send_alert(password, message):

    resp = requests.post(api_url + password, params=None, data=json.dumps(message))

    if resp.status_code == 200:
        result = resp.text.split("\t")
        if result.find('eventId') == -1:
            sys.stdout.write(result)
            return 0
        
    sys.stderr.write(resp.text)
    return 2

sys.exit(main())
